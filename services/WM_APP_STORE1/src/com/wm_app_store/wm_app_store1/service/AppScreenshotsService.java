/*Copyright (c) 2015-2016 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.wm_app_store.wm_app_store1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wm_app_store.wm_app_store1.AppScreenshots;

/**
 * Service object for domain model class {@link AppScreenshots}.
 */
public interface AppScreenshotsService {

    /**
     * Creates a new AppScreenshots. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AppScreenshots if any.
     *
     * @param appScreenshots Details of the AppScreenshots to be created; value cannot be null.
     * @return The newly created AppScreenshots.
     */
    AppScreenshots create(@Valid AppScreenshots appScreenshots);


	/**
     * Returns AppScreenshots by given id if exists.
     *
     * @param appscreenshotsId The id of the AppScreenshots to get; value cannot be null.
     * @return AppScreenshots associated with the given appscreenshotsId.
	 * @throws EntityNotFoundException If no AppScreenshots is found.
     */
    AppScreenshots getById(Integer appscreenshotsId);

    /**
     * Find and return the AppScreenshots by given id if exists, returns null otherwise.
     *
     * @param appscreenshotsId The id of the AppScreenshots to get; value cannot be null.
     * @return AppScreenshots associated with the given appscreenshotsId.
     */
    AppScreenshots findById(Integer appscreenshotsId);

	/**
     * Find and return the list of AppScreenshots by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param appscreenshotsIds The id's of the AppScreenshots to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return AppScreenshots associated with the given appscreenshotsIds.
     */
    List<AppScreenshots> findByMultipleIds(List<Integer> appscreenshotsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing AppScreenshots. It replaces all fields of the existing AppScreenshots with the given appScreenshots.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AppScreenshots if any.
     *
     * @param appScreenshots The details of the AppScreenshots to be updated; value cannot be null.
     * @return The updated AppScreenshots.
     * @throws EntityNotFoundException if no AppScreenshots is found with given input.
     */
    AppScreenshots update(@Valid AppScreenshots appScreenshots);


    /**
     * Partially updates the details of an existing AppScreenshots. It updates only the
     * fields of the existing AppScreenshots which are passed in the appScreenshotsPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AppScreenshots if any.
     *
     * @param appscreenshotsId The id of the AppScreenshots to be deleted; value cannot be null.
     * @param appScreenshotsPatch The partial data of AppScreenshots which is supposed to be updated; value cannot be null.
     * @return The updated AppScreenshots.
     * @throws EntityNotFoundException if no AppScreenshots is found with given input.
     */
    AppScreenshots partialUpdate(Integer appscreenshotsId, Map<String, Object> appScreenshotsPatch);

    /**
     * Deletes an existing AppScreenshots with the given id.
     *
     * @param appscreenshotsId The id of the AppScreenshots to be deleted; value cannot be null.
     * @return The deleted AppScreenshots.
     * @throws EntityNotFoundException if no AppScreenshots found with the given id.
     */
    AppScreenshots delete(Integer appscreenshotsId);

    /**
     * Deletes an existing AppScreenshots with the given object.
     *
     * @param appScreenshots The instance of the AppScreenshots to be deleted; value cannot be null.
     */
    void delete(AppScreenshots appScreenshots);

    /**
     * Find all AppScreenshots matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AppScreenshots.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<AppScreenshots> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all AppScreenshots matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AppScreenshots.
     *
     * @see Pageable
     * @see Page
     */
    Page<AppScreenshots> findAll(String query, Pageable pageable);

    /**
     * Exports all AppScreenshots matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all AppScreenshots matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the AppScreenshots in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the AppScreenshots.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}
