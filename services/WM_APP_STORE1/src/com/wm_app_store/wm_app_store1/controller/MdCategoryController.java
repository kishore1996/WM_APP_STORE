/*Copyright (c) 2015-2016 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.wm_app_store.wm_app_store1.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wm_app_store.wm_app_store1.AppInfo;
import com.wm_app_store.wm_app_store1.MdCategory;
import com.wm_app_store.wm_app_store1.service.MdCategoryService;


/**
 * Controller object for domain model class MdCategory.
 * @see MdCategory
 */
@RestController("WM_APP_STORE1.MdCategoryController")
@Api(value = "MdCategoryController", description = "Exposes APIs to work with MdCategory resource.")
@RequestMapping("/WM_APP_STORE1/MdCategory")
public class MdCategoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(MdCategoryController.class);

    @Autowired
	@Qualifier("WM_APP_STORE1.MdCategoryService")
	private MdCategoryService mdCategoryService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new MdCategory instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MdCategory createMdCategory(@RequestBody MdCategory mdCategory) {
		LOGGER.debug("Create MdCategory with information: {}" , mdCategory);

		mdCategory = mdCategoryService.create(mdCategory);
		LOGGER.debug("Created MdCategory with information: {}" , mdCategory);

	    return mdCategory;
	}

    @ApiOperation(value = "Returns the MdCategory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MdCategory getMdCategory(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting MdCategory with id: {}" , id);

        MdCategory foundMdCategory = mdCategoryService.getById(id);
        LOGGER.debug("MdCategory details with id: {}" , foundMdCategory);

        return foundMdCategory;
    }

    @ApiOperation(value = "Updates the MdCategory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MdCategory editMdCategory(@PathVariable("id") Integer id, @RequestBody MdCategory mdCategory) {
        LOGGER.debug("Editing MdCategory with id: {}" , mdCategory.getId());

        mdCategory.setId(id);
        mdCategory = mdCategoryService.update(mdCategory);
        LOGGER.debug("MdCategory details with id: {}" , mdCategory);

        return mdCategory;
    }
    
    @ApiOperation(value = "Partially updates the MdCategory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MdCategory patchMdCategory(@PathVariable("id") Integer id, @RequestBody @MapTo(MdCategory.class) Map<String, Object> mdCategoryPatch) {
        LOGGER.debug("Partially updating MdCategory with id: {}" , id);

        MdCategory mdCategory = mdCategoryService.partialUpdate(id, mdCategoryPatch);
        LOGGER.debug("MdCategory details after partial update: {}" , mdCategory);

        return mdCategory;
    }

    @ApiOperation(value = "Deletes the MdCategory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMdCategory(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting MdCategory with id: {}" , id);

        MdCategory deletedMdCategory = mdCategoryService.delete(id);

        return deletedMdCategory != null;
    }

    /**
     * @deprecated Use {@link #findMdCategories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of MdCategory instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<MdCategory> searchMdCategoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering MdCategories list by query filter:{}", (Object) queryFilters);
        return mdCategoryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of MdCategory instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MdCategory> findMdCategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering MdCategories list by filter:", query);
        return mdCategoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of MdCategory instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<MdCategory> filterMdCategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering MdCategories list by filter", query);
        return mdCategoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportMdCategories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return mdCategoryService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportMdCategoriesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = MdCategory.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> mdCategoryService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of MdCategory instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countMdCategories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting MdCategories");
		return mdCategoryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getMdCategoryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return mdCategoryService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/appInfos", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the appInfos instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AppInfo> findAssociatedAppInfos(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated appInfos");
        return mdCategoryService.findAssociatedAppInfos(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service MdCategoryService instance
	 */
	protected void setMdCategoryService(MdCategoryService service) {
		this.mdCategoryService = service;
	}

}
