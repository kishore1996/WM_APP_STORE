/*Copyright (c) 2015-2016 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.wm_app_store.wm_app_store.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wm_app_store.wm_app_store.AppDownloadHistory;
import com.wm_app_store.wm_app_store.service.AppDownloadHistoryService;


/**
 * Controller object for domain model class AppDownloadHistory.
 * @see AppDownloadHistory
 */
@RestController("WM_APP_STORE.AppDownloadHistoryController")
@Api(value = "AppDownloadHistoryController", description = "Exposes APIs to work with AppDownloadHistory resource.")
@RequestMapping("/WM_APP_STORE/AppDownloadHistory")
public class AppDownloadHistoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AppDownloadHistoryController.class);

    @Autowired
	@Qualifier("WM_APP_STORE.AppDownloadHistoryService")
	private AppDownloadHistoryService appDownloadHistoryService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new AppDownloadHistory instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AppDownloadHistory createAppDownloadHistory(@RequestBody AppDownloadHistory appDownloadHistory) {
		LOGGER.debug("Create AppDownloadHistory with information: {}" , appDownloadHistory);

		appDownloadHistory = appDownloadHistoryService.create(appDownloadHistory);
		LOGGER.debug("Created AppDownloadHistory with information: {}" , appDownloadHistory);

	    return appDownloadHistory;
	}

    @ApiOperation(value = "Returns the AppDownloadHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AppDownloadHistory getAppDownloadHistory(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting AppDownloadHistory with id: {}" , id);

        AppDownloadHistory foundAppDownloadHistory = appDownloadHistoryService.getById(id);
        LOGGER.debug("AppDownloadHistory details with id: {}" , foundAppDownloadHistory);

        return foundAppDownloadHistory;
    }

    @ApiOperation(value = "Updates the AppDownloadHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AppDownloadHistory editAppDownloadHistory(@PathVariable("id") Integer id, @RequestBody AppDownloadHistory appDownloadHistory) {
        LOGGER.debug("Editing AppDownloadHistory with id: {}" , appDownloadHistory.getId());

        appDownloadHistory.setId(id);
        appDownloadHistory = appDownloadHistoryService.update(appDownloadHistory);
        LOGGER.debug("AppDownloadHistory details with id: {}" , appDownloadHistory);

        return appDownloadHistory;
    }
    
    @ApiOperation(value = "Partially updates the AppDownloadHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AppDownloadHistory patchAppDownloadHistory(@PathVariable("id") Integer id, @RequestBody @MapTo(AppDownloadHistory.class) Map<String, Object> appDownloadHistoryPatch) {
        LOGGER.debug("Partially updating AppDownloadHistory with id: {}" , id);

        AppDownloadHistory appDownloadHistory = appDownloadHistoryService.partialUpdate(id, appDownloadHistoryPatch);
        LOGGER.debug("AppDownloadHistory details after partial update: {}" , appDownloadHistory);

        return appDownloadHistory;
    }

    @ApiOperation(value = "Deletes the AppDownloadHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAppDownloadHistory(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting AppDownloadHistory with id: {}" , id);

        AppDownloadHistory deletedAppDownloadHistory = appDownloadHistoryService.delete(id);

        return deletedAppDownloadHistory != null;
    }

    /**
     * @deprecated Use {@link #findAppDownloadHistories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AppDownloadHistory instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<AppDownloadHistory> searchAppDownloadHistoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AppDownloadHistories list by query filter:{}", (Object) queryFilters);
        return appDownloadHistoryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AppDownloadHistory instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AppDownloadHistory> findAppDownloadHistories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AppDownloadHistories list by filter:", query);
        return appDownloadHistoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AppDownloadHistory instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<AppDownloadHistory> filterAppDownloadHistories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AppDownloadHistories list by filter", query);
        return appDownloadHistoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportAppDownloadHistories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return appDownloadHistoryService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportAppDownloadHistoriesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = AppDownloadHistory.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> appDownloadHistoryService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of AppDownloadHistory instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countAppDownloadHistories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AppDownloadHistories");
		return appDownloadHistoryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getAppDownloadHistoryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return appDownloadHistoryService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AppDownloadHistoryService instance
	 */
	protected void setAppDownloadHistoryService(AppDownloadHistoryService service) {
		this.appDownloadHistoryService = service;
	}

}