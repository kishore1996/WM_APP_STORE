/*Copyright (c) 2015-2016 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.wm_app_store.wm_app_store.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.wm_app_store.wm_app_store.service.WM_APP_STOREQueryExecutorService;
import com.wm_app_store.wm_app_store.models.query.*;

@RestController(value = "WM_APP_STORE.QueryExecutionController")
@RequestMapping("/WM_APP_STORE/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private WM_APP_STOREQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/SELECTFROM_APPINFO", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SELECTFROM_APPINFO")
    public Page<SelectfromAppinfoResponse> executeSELECTFROM_APPINFO(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SELECTFROM_APPINFO");
        Page<SelectfromAppinfoResponse> _result = queryService.executeSELECTFROM_APPINFO(pageable);
        LOGGER.debug("got the result for named query: SELECTFROM_APPINFO, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SELECTFROM_APPINFO")
    @RequestMapping(value = "/queries/SELECTFROM_APPINFO/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSELECTFROM_APPINFO(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SELECTFROM_APPINFO");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SELECTFROM_APPINFO";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSELECTFROM_APPINFO( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SELECTFROM_APPSCREENSHOTS", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SELECTFROM_APPSCREENSHOTS")
    public Page<SelectfromAppscreenshotsResponse> executeSELECTFROM_APPSCREENSHOTS(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SELECTFROM_APPSCREENSHOTS");
        Page<SelectfromAppscreenshotsResponse> _result = queryService.executeSELECTFROM_APPSCREENSHOTS(pageable);
        LOGGER.debug("got the result for named query: SELECTFROM_APPSCREENSHOTS, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SELECTFROM_APPSCREENSHOTS")
    @RequestMapping(value = "/queries/SELECTFROM_APPSCREENSHOTS/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSELECTFROM_APPSCREENSHOTS(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SELECTFROM_APPSCREENSHOTS");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SELECTFROM_APPSCREENSHOTS";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSELECTFROM_APPSCREENSHOTS( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SELECTFROM_APPSOURCE", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SELECTFROM_APPSOURCE")
    public Page<SelectfromAppsourceResponse> executeSELECTFROM_APPSOURCE(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SELECTFROM_APPSOURCE");
        Page<SelectfromAppsourceResponse> _result = queryService.executeSELECTFROM_APPSOURCE(pageable);
        LOGGER.debug("got the result for named query: SELECTFROM_APPSOURCE, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SELECTFROM_APPSOURCE")
    @RequestMapping(value = "/queries/SELECTFROM_APPSOURCE/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSELECTFROM_APPSOURCE(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SELECTFROM_APPSOURCE");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SELECTFROM_APPSOURCE";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSELECTFROM_APPSOURCE( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/GetDatafromAPPSource", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "GetDatafromAPPSource")
    public Page<GetDatafromAppsourceResponse> executeGetDatafromAPPSource(@RequestParam(value = "id") Integer id, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: GetDatafromAPPSource");
        Page<GetDatafromAppsourceResponse> _result = queryService.executeGetDatafromAPPSource(id, pageable);
        LOGGER.debug("got the result for named query: GetDatafromAPPSource, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query GetDatafromAPPSource")
    @RequestMapping(value = "/queries/GetDatafromAPPSource/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetDatafromAPPSource(@RequestParam(value = "id") Integer id, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetDatafromAPPSource");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "GetDatafromAPPSource";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetDatafromAPPSource(id,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/AVGRATING", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Avg Rating")
    public Page<AvgratingResponse> executeAVGRATING(@RequestParam(value = "APPID") Integer appid, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: AVGRATING");
        Page<AvgratingResponse> _result = queryService.executeAVGRATING(appid, pageable);
        LOGGER.debug("got the result for named query: AVGRATING, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query AVGRATING")
    @RequestMapping(value = "/queries/AVGRATING/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportAVGRATING(@RequestParam(value = "APPID") Integer appid, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: AVGRATING");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "AVGRATING";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportAVGRATING(appid,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/deleteUser", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "delete users")
    public IntegerWrapper executeDeleteUser(@RequestParam(value = "uname") String uname, @RequestParam(value = "id") Integer id, @RequestParam(value = "loggedinuser") String loggedinuser, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: deleteUser");
        Integer _result = queryService.executeDeleteUser(uname, id, loggedinuser);
        LOGGER.debug("got the result for named query: deleteUser, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/editUser", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Edit user credentials")
    public IntegerWrapper executeEditUser(@Valid @RequestBody EditUserRequest editUserRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: editUser");
        Integer _result = queryService.executeEditUser(editUserRequest);
        LOGGER.debug("got the result for named query: editUser, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/viewProfile", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "view logged user profile")
    public Page<ViewProfileResponse> executeViewProfile(@RequestParam(value = "uname") String uname, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: viewProfile");
        Page<ViewProfileResponse> _result = queryService.executeViewProfile(uname, pageable);
        LOGGER.debug("got the result for named query: viewProfile, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query viewProfile")
    @RequestMapping(value = "/queries/viewProfile/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportViewProfile(@RequestParam(value = "uname") String uname, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: viewProfile");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "viewProfile";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportViewProfile(uname,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/selectUserRoles", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "select based on user roles")
    public Page<SelectUserRolesResponse> executeSelectUserRoles(@RequestParam(value = "user_role") String userRole, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: selectUserRoles");
        Page<SelectUserRolesResponse> _result = queryService.executeSelectUserRoles(userRole, pageable);
        LOGGER.debug("got the result for named query: selectUserRoles, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query selectUserRoles")
    @RequestMapping(value = "/queries/selectUserRoles/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSelectUserRoles(@RequestParam(value = "user_role") String userRole, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: selectUserRoles");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "selectUserRoles";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSelectUserRoles(userRole,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SELECTFROM_MD_CATEGORY", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SELECTFROM_MD_CATEGORY")
    public Page<SelectfromMdCategoryResponse> executeSELECTFROM_MD_CATEGORY(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SELECTFROM_MD_CATEGORY");
        Page<SelectfromMdCategoryResponse> _result = queryService.executeSELECTFROM_MD_CATEGORY(pageable);
        LOGGER.debug("got the result for named query: SELECTFROM_MD_CATEGORY, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SELECTFROM_MD_CATEGORY")
    @RequestMapping(value = "/queries/SELECTFROM_MD_CATEGORY/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSELECTFROM_MD_CATEGORY(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SELECTFROM_MD_CATEGORY");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SELECTFROM_MD_CATEGORY";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSELECTFROM_MD_CATEGORY( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/TotalDownloads", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Total Downloads")
    public Page<TotalDownloadsResponse> executeTotalDownloads(@RequestParam(value = "id") Integer id, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: TotalDownloads");
        Page<TotalDownloadsResponse> _result = queryService.executeTotalDownloads(id, pageable);
        LOGGER.debug("got the result for named query: TotalDownloads, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query TotalDownloads")
    @RequestMapping(value = "/queries/TotalDownloads/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportTotalDownloads(@RequestParam(value = "id") Integer id, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: TotalDownloads");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "TotalDownloads";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportTotalDownloads(id,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/changePassword", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "change user password")
    public IntegerWrapper executeChangePassword(@Valid @RequestBody ChangePasswordRequest changePasswordRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: changePassword");
        Integer _result = queryService.executeChangePassword(changePasswordRequest);
        LOGGER.debug("got the result for named query: changePassword, result:{}", _result);
        return new IntegerWrapper(_result);
    }

}
