/*Copyright (c) 2015-2016 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.wm_app_store.wm_app_store.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wm_app_store.wm_app_store.AppDownloadHistory;
import com.wm_app_store.wm_app_store.AppSource;

/**
 * Service object for domain model class {@link AppSource}.
 */
public interface AppSourceService {

    /**
     * Creates a new AppSource. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AppSource if any.
     *
     * @param appSource Details of the AppSource to be created; value cannot be null.
     * @return The newly created AppSource.
     */
    AppSource create(@Valid AppSource appSource);


	/**
     * Returns AppSource by given id if exists.
     *
     * @param appsourceId The id of the AppSource to get; value cannot be null.
     * @return AppSource associated with the given appsourceId.
	 * @throws EntityNotFoundException If no AppSource is found.
     */
    AppSource getById(Integer appsourceId);

    /**
     * Find and return the AppSource by given id if exists, returns null otherwise.
     *
     * @param appsourceId The id of the AppSource to get; value cannot be null.
     * @return AppSource associated with the given appsourceId.
     */
    AppSource findById(Integer appsourceId);

	/**
     * Find and return the list of AppSources by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param appsourceIds The id's of the AppSource to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return AppSources associated with the given appsourceIds.
     */
    List<AppSource> findByMultipleIds(List<Integer> appsourceIds, boolean orderedReturn);


    /**
     * Updates the details of an existing AppSource. It replaces all fields of the existing AppSource with the given appSource.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AppSource if any.
     *
     * @param appSource The details of the AppSource to be updated; value cannot be null.
     * @return The updated AppSource.
     * @throws EntityNotFoundException if no AppSource is found with given input.
     */
    AppSource update(@Valid AppSource appSource);


    /**
     * Partially updates the details of an existing AppSource. It updates only the
     * fields of the existing AppSource which are passed in the appSourcePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AppSource if any.
     *
     * @param appsourceId The id of the AppSource to be deleted; value cannot be null.
     * @param appSourcePatch The partial data of AppSource which is supposed to be updated; value cannot be null.
     * @return The updated AppSource.
     * @throws EntityNotFoundException if no AppSource is found with given input.
     */
    AppSource partialUpdate(Integer appsourceId, Map<String, Object> appSourcePatch);

    /**
     * Deletes an existing AppSource with the given id.
     *
     * @param appsourceId The id of the AppSource to be deleted; value cannot be null.
     * @return The deleted AppSource.
     * @throws EntityNotFoundException if no AppSource found with the given id.
     */
    AppSource delete(Integer appsourceId);

    /**
     * Deletes an existing AppSource with the given object.
     *
     * @param appSource The instance of the AppSource to be deleted; value cannot be null.
     */
    void delete(AppSource appSource);

    /**
     * Find all AppSources matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AppSources.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<AppSource> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all AppSources matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AppSources.
     *
     * @see Pageable
     * @see Page
     */
    Page<AppSource> findAll(String query, Pageable pageable);

    /**
     * Exports all AppSources matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all AppSources matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the AppSources in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the AppSource.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated appDownloadHistories for given AppSource id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated AppDownloadHistory instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<AppDownloadHistory> findAssociatedAppDownloadHistories(Integer id, Pageable pageable);

}
