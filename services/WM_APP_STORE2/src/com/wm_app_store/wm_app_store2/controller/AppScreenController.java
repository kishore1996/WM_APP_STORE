/*Copyright (c) 2015-2016 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.wm_app_store.wm_app_store2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wm_app_store.wm_app_store2.AppScreen;
import com.wm_app_store.wm_app_store2.service.AppScreenService;


/**
 * Controller object for domain model class AppScreen.
 * @see AppScreen
 */
@RestController("WM_APP_STORE2.AppScreenController")
@Api(value = "AppScreenController", description = "Exposes APIs to work with AppScreen resource.")
@RequestMapping("/WM_APP_STORE2/AppScreen")
public class AppScreenController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AppScreenController.class);

    @Autowired
	@Qualifier("WM_APP_STORE2.AppScreenService")
	private AppScreenService appScreenService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new AppScreen instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AppScreen createAppScreen(@RequestBody AppScreen appScreen) {
		LOGGER.debug("Create AppScreen with information: {}" , appScreen);

		appScreen = appScreenService.create(appScreen);
		LOGGER.debug("Created AppScreen with information: {}" , appScreen);

	    return appScreen;
	}

    @ApiOperation(value = "Returns the AppScreen instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AppScreen getAppScreen(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting AppScreen with id: {}" , id);

        AppScreen foundAppScreen = appScreenService.getById(id);
        LOGGER.debug("AppScreen details with id: {}" , foundAppScreen);

        return foundAppScreen;
    }

    @ApiOperation(value = "Updates the AppScreen instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AppScreen editAppScreen(@PathVariable("id") Integer id, @RequestBody AppScreen appScreen) {
        LOGGER.debug("Editing AppScreen with id: {}" , appScreen.getId());

        appScreen.setId(id);
        appScreen = appScreenService.update(appScreen);
        LOGGER.debug("AppScreen details with id: {}" , appScreen);

        return appScreen;
    }
    
    @ApiOperation(value = "Partially updates the AppScreen instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AppScreen patchAppScreen(@PathVariable("id") Integer id, @RequestBody @MapTo(AppScreen.class) Map<String, Object> appScreenPatch) {
        LOGGER.debug("Partially updating AppScreen with id: {}" , id);

        AppScreen appScreen = appScreenService.partialUpdate(id, appScreenPatch);
        LOGGER.debug("AppScreen details after partial update: {}" , appScreen);

        return appScreen;
    }

    @ApiOperation(value = "Deletes the AppScreen instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAppScreen(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting AppScreen with id: {}" , id);

        AppScreen deletedAppScreen = appScreenService.delete(id);

        return deletedAppScreen != null;
    }

    /**
     * @deprecated Use {@link #findAppScreens(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AppScreen instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<AppScreen> searchAppScreensByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AppScreens list by query filter:{}", (Object) queryFilters);
        return appScreenService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AppScreen instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AppScreen> findAppScreens(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AppScreens list by filter:", query);
        return appScreenService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AppScreen instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<AppScreen> filterAppScreens(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AppScreens list by filter", query);
        return appScreenService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportAppScreens(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return appScreenService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportAppScreensAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = AppScreen.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> appScreenService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of AppScreen instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countAppScreens( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AppScreens");
		return appScreenService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getAppScreenAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return appScreenService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AppScreenService instance
	 */
	protected void setAppScreenService(AppScreenService service) {
		this.appScreenService = service;
	}

}
