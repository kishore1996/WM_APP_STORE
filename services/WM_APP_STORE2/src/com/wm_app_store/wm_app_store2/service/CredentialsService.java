/*Copyright (c) 2015-2016 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.wm_app_store.wm_app_store2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wm_app_store.wm_app_store2.Credentials;

/**
 * Service object for domain model class {@link Credentials}.
 */
public interface CredentialsService {

    /**
     * Creates a new Credentials. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Credentials if any.
     *
     * @param credentials Details of the Credentials to be created; value cannot be null.
     * @return The newly created Credentials.
     */
    Credentials create(@Valid Credentials credentials);


	/**
     * Returns Credentials by given id if exists.
     *
     * @param credentialsId The id of the Credentials to get; value cannot be null.
     * @return Credentials associated with the given credentialsId.
	 * @throws EntityNotFoundException If no Credentials is found.
     */
    Credentials getById(Integer credentialsId);

    /**
     * Find and return the Credentials by given id if exists, returns null otherwise.
     *
     * @param credentialsId The id of the Credentials to get; value cannot be null.
     * @return Credentials associated with the given credentialsId.
     */
    Credentials findById(Integer credentialsId);

	/**
     * Find and return the list of Credentials by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param credentialsIds The id's of the Credentials to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Credentials associated with the given credentialsIds.
     */
    List<Credentials> findByMultipleIds(List<Integer> credentialsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Credentials. It replaces all fields of the existing Credentials with the given credentials.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Credentials if any.
     *
     * @param credentials The details of the Credentials to be updated; value cannot be null.
     * @return The updated Credentials.
     * @throws EntityNotFoundException if no Credentials is found with given input.
     */
    Credentials update(@Valid Credentials credentials);


    /**
     * Partially updates the details of an existing Credentials. It updates only the
     * fields of the existing Credentials which are passed in the credentialsPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Credentials if any.
     *
     * @param credentialsId The id of the Credentials to be deleted; value cannot be null.
     * @param credentialsPatch The partial data of Credentials which is supposed to be updated; value cannot be null.
     * @return The updated Credentials.
     * @throws EntityNotFoundException if no Credentials is found with given input.
     */
    Credentials partialUpdate(Integer credentialsId, Map<String, Object> credentialsPatch);

    /**
     * Deletes an existing Credentials with the given id.
     *
     * @param credentialsId The id of the Credentials to be deleted; value cannot be null.
     * @return The deleted Credentials.
     * @throws EntityNotFoundException if no Credentials found with the given id.
     */
    Credentials delete(Integer credentialsId);

    /**
     * Deletes an existing Credentials with the given object.
     *
     * @param credentials The instance of the Credentials to be deleted; value cannot be null.
     */
    void delete(Credentials credentials);

    /**
     * Find all Credentials matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Credentials.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Credentials> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Credentials matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Credentials.
     *
     * @see Pageable
     * @see Page
     */
    Page<Credentials> findAll(String query, Pageable pageable);

    /**
     * Exports all Credentials matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Credentials matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Credentials in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Credentials.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}
