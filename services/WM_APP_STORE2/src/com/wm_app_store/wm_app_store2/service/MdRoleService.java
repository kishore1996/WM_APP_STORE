/*Copyright (c) 2015-2016 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.wm_app_store.wm_app_store2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wm_app_store.wm_app_store2.MdRole;
import com.wm_app_store.wm_app_store2.UserRole;

/**
 * Service object for domain model class {@link MdRole}.
 */
public interface MdRoleService {

    /**
     * Creates a new MdRole. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on MdRole if any.
     *
     * @param mdRole Details of the MdRole to be created; value cannot be null.
     * @return The newly created MdRole.
     */
    MdRole create(@Valid MdRole mdRole);


	/**
     * Returns MdRole by given id if exists.
     *
     * @param mdroleId The id of the MdRole to get; value cannot be null.
     * @return MdRole associated with the given mdroleId.
	 * @throws EntityNotFoundException If no MdRole is found.
     */
    MdRole getById(Integer mdroleId);

    /**
     * Find and return the MdRole by given id if exists, returns null otherwise.
     *
     * @param mdroleId The id of the MdRole to get; value cannot be null.
     * @return MdRole associated with the given mdroleId.
     */
    MdRole findById(Integer mdroleId);

	/**
     * Find and return the list of MdRoles by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param mdroleIds The id's of the MdRole to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return MdRoles associated with the given mdroleIds.
     */
    List<MdRole> findByMultipleIds(List<Integer> mdroleIds, boolean orderedReturn);


    /**
     * Updates the details of an existing MdRole. It replaces all fields of the existing MdRole with the given mdRole.
     *
     * This method overrides the input field values using Server side or database managed properties defined on MdRole if any.
     *
     * @param mdRole The details of the MdRole to be updated; value cannot be null.
     * @return The updated MdRole.
     * @throws EntityNotFoundException if no MdRole is found with given input.
     */
    MdRole update(@Valid MdRole mdRole);


    /**
     * Partially updates the details of an existing MdRole. It updates only the
     * fields of the existing MdRole which are passed in the mdRolePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on MdRole if any.
     *
     * @param mdroleId The id of the MdRole to be deleted; value cannot be null.
     * @param mdRolePatch The partial data of MdRole which is supposed to be updated; value cannot be null.
     * @return The updated MdRole.
     * @throws EntityNotFoundException if no MdRole is found with given input.
     */
    MdRole partialUpdate(Integer mdroleId, Map<String, Object> mdRolePatch);

    /**
     * Deletes an existing MdRole with the given id.
     *
     * @param mdroleId The id of the MdRole to be deleted; value cannot be null.
     * @return The deleted MdRole.
     * @throws EntityNotFoundException if no MdRole found with the given id.
     */
    MdRole delete(Integer mdroleId);

    /**
     * Deletes an existing MdRole with the given object.
     *
     * @param mdRole The instance of the MdRole to be deleted; value cannot be null.
     */
    void delete(MdRole mdRole);

    /**
     * Find all MdRoles matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching MdRoles.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<MdRole> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all MdRoles matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching MdRoles.
     *
     * @see Pageable
     * @see Page
     */
    Page<MdRole> findAll(String query, Pageable pageable);

    /**
     * Exports all MdRoles matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all MdRoles matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the MdRoles in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the MdRole.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated userRoles for given MdRole id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated UserRole instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<UserRole> findAssociatedUserRoles(Integer id, Pageable pageable);

}
